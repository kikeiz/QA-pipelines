name: Deploy Hotfix (.NET)

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  build-and-deploy-hotfix:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'hotfix/')
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Build and Test .NET
        run: |
          dotnet restore
          dotnet build
          dotnet test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine new patch tag
        id: versioning
        run: |
          echo "üîç Getting latest valid semantic version tag..."
          git fetch --tags
          latest_tag=$(git tag --list 'v*' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "New patch tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Build & Push Image
        id: build-image
        run: |
          IMAGE_TAG=${{ steps.versioning.outputs.new_tag }}
          echo "Building Docker image with tag $IMAGE_TAG..."
          docker build -t ${{ secrets.ECR_REPO }}:$IMAGE_TAG -f Dockerfile .
          echo "Pushing Docker image with tag $IMAGE_TAG..."
          docker push ${{ secrets.ECR_REPO }}:$IMAGE_TAG
          echo "image=${{ secrets.ECR_REPO }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download and clean existing ECS task definition
        id: fetch-task
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ vars.TASK_DEFINITION }} \
            --region ${{ vars.AWS_REGION }} \
            --query 'taskDefinition' \
            --output json > taskdef.json
          jq 'del(
            .taskDefinitionArn,
            .revision,
            .status,
            .requiresAttributes,
            .compatibilities,
            .registeredAt,
            .registeredBy
          )' taskdef.json > taskdef-clean.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdef-clean.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ vars.AWS_REGION }}
            QA_SQS_QUEUE_URL=${{ vars.QA_SQS_QUEUE_URL }}
            REMARKETING_SERVICE_QUEUE_URL=${{ vars.REMARKETING_SERVICE_QUEUE_URL }}
            ASPNETCORE_ENVIRONMENT=Staging
            QA_PROCESS_TABLE=${{ vars.QA_PROCESS_TABLE }}
            USER_TABLE=${{ vars.USER_TABLE }}
            MAX_NUM_PROCESSES=${{ vars.MAX_NUM_PROCESSES }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Cleanup task definition files
        run: rm -f taskdef.json taskdef-clean.json

      - name: Create Git tag and push to origin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.versioning.outputs.new_tag }}
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin ${{ steps.versioning.outputs.new_tag }}

  merge-to-develop:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'hotfix/')
    needs: build-and-deploy-hotfix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Configure Git for merge
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge main into develop
        run: |
          echo "Merging main into develop..."
          git fetch origin develop
          git checkout develop
          git merge origin/main --no-ff -m "Merge main into develop after hotfix deployment"
          git push origin develop