name: Deploy to Production (.NET)

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: read

jobs:
  analyze-commits:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest

    permissions:
      contents: write 
      packages: write 
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine next version and tag
        id: versioning
        run: |
          echo "🔍 Getting latest tag..."
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
      
          # Remove leading 'v' and split
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
      
          # Get commits since last tag or all commits if first tag
          echo "🧾 Getting commits..."
          if git rev-parse "$latest_tag" >/dev/null 2>&1; then
            commits=$(git log "$latest_tag"..HEAD --pretty=format:%B)
          else
            commits=$(git log --pretty=format:%B)
          fi
      
          echo "$commits" | grep -q "BREAKING CHANGE" && bump=major
          echo "$commits" | grep -q "^feat" && [[ $bump != "major" ]] && bump=minor
          echo "$commits" | grep -q "^fix" && [[ -z "$bump" ]] && bump=patch
      
          if [[ -z "$bump" ]]; then
            echo "ℹ️ No version-worthy changes found. Skipping tag."
            echo "new_tag=" >> $GITHUB_OUTPUT
            exit 0
          fi
      
          # Increment version
          case $bump in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
      
          new_tag="v$major.$minor.$patch"
          echo "📦 New version: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Use new version
        run: echo "The new tag is ${{ steps.versioning.outputs.new_tag }}"

      - name: Commit version bump and create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -am "chore(release): v${{ steps.versioning.outputs.new_tag }} [skip ci]" || echo "No changes to commit"
          git tag ${{ steps.versioning.outputs.new_tag }}
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin main --tags

  deploy:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    needs: analyze-commits
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fetch tags created by Semantic Release
        run: git fetch --tags

      - name: Get latest tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Retag and Push Final Version
        id: build-image
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          REPO=${{ secrets.ECR_REPO }}

          # Pull the 'release' image (built in staging)
          docker pull $REPO:release

          # Tag it with the final version
          docker tag $REPO:release $REPO:$VERSION

          # Push only the version tag
          docker push $REPO:$VERSION

          # Optional: untag the 'release' tag locally
          docker rmi $REPO:release || true

          echo "image=$REPO:$VERSION" >> $GITHUB_OUTPUT

      - name: Download and clean existing ECS task definition
        id: fetch-task
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ vars.TASK_DEFINITION }} \
            --region ${{ vars.AWS_REGION }} \
            --query 'taskDefinition' \
            --output json > taskdef.json

          jq 'del(
            .taskDefinitionArn,
            .revision,
            .status,
            .requiresAttributes,
            .compatibilities,
            .registeredAt,
            .registeredBy
          )' taskdef.json > taskdef-clean.json
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdef-clean.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ vars.AWS_REGION }}
            QA_SQS_QUEUE_URL=${{ vars.QA_SQS_QUEUE_URL }}
            REMARKETING_SERVICE_QUEUE_URL=${{ vars.REMARKETING_SERVICE_QUEUE_URL }}
            ASPNETCORE_ENVIRONMENT=Development
            QA_PROCESS_TABLE=${{ vars.QA_PROCESS_TABLE }}
            USER_TABLE=${{ vars.USER_TABLE }}
            MAX_NUM_PROCESSES=${{ vars.MAX_NUM_PROCESSES }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Cleanup task definition files
        run: rm -f taskdef.json taskdef-clean.json

  delete-release-tag:
    name: Delete ECR 'release' tag
    needs: deploy
    uses: ./.github/workflows/delete-ecr-tag.yml
    with:
      repo: my-ecs-app             
      region: eu-central-1        
      tag: release
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  