name: Deploy to Production (.NET)

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: read

jobs:
  analyze-commits: 
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.versioning.outputs.new_tag }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine next version and tag
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Getting latest valid semantic version tag..."
          # Fetch all tags
          git fetch --tags
      
          # Find the highest valid semver tag or fallback to v0.0.0
          latest_tag=$(git tag --list 'v*' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
      
          # Remove leading 'v' and split version numbers
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
      
          echo "üßæ Fetching commit messages from the pull request via GitHub API..."
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Fetching commits for PR #$PR_NUMBER"
          commits=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/commits \
            | jq -r '.[].commit.message')
      
          echo "Commit messages from PR:"
          echo "$commits"
      
          # Determine version bump type based on commit messages
          echo "$commits" | grep -q "BREAKING CHANGE" && bump=major
          echo "$commits" | grep -q "^feat" && [[ $bump != "major" ]] && bump=minor
          echo "$commits" | grep -q "^fix" && [[ -z "$bump" ]] && bump=patch
      
          if [[ -z "$bump" ]]; then
            echo "‚ÑπÔ∏è No version-worthy changes found. Skipping tag."
            echo "new_tag=" >> $GITHUB_OUTPUT
            exit 0
          fi
      
          # Apply version bump
          case $bump in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
      
          new_tag="v$major.$minor.$patch"
          echo "üì¶ New version: $new_tag"
      
          # Set new_tag as an output for later jobs
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Use new version
        run: echo "The new tag is ${{ steps.versioning.outputs.new_tag }}"

  commit-tag-bump:
    needs: analyze-commits
    uses: ./.github/workflows/commit-tag-bump.yml
    with:
      new_tag: ${{ needs.analyze-commits.outputs.new_tag }}
  

  pull-retag-and-push:
    runs-on: ubuntu-latest
    environment: production
    needs: [commit-tag-bump, analyze-commits]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Retag and Push Final Version
        id: build-image
        run: |
          VERSION=${{ needs.analyze-commits.outputs.new_tag }}
          REPO=${{ vars.ECR_REPO }}

          # Pull the 'release' image (built in staging)
          docker pull $REPO:release

          # Tag it with the final version
          docker tag $REPO:release $REPO:$VERSION

          # Push only the version tag
          docker push $REPO:$VERSION

          # Optional: untag the 'release' tag locally
          docker rmi $REPO:release || true

          echo "image=$REPO:$VERSION" >> $GITHUB_OUTPUT

  export_vars:
    needs: [pull-retag-and-push, analyze-commits]
    runs-on: ubuntu-latest
    environment: production
    outputs:
      AWS_REGION: ${{ steps.vars.outputs.AWS_REGION }}
      QA_SQS_QUEUE_URL: ${{ steps.vars.outputs.QA_SQS_QUEUE_URL }}
      REMARKETING_SERVICE_QUEUE_URL: ${{ steps.vars.outputs.REMARKETING_SERVICE_QUEUE_URL }}
      QA_PROCESS_TABLE: ${{ steps.vars.outputs.QA_PROCESS_TABLE }}
      USER_TABLE: ${{ steps.vars.outputs.USER_TABLE }}
      MAX_NUM_PROCESSES: ${{ steps.vars.outputs.MAX_NUM_PROCESSES }}
      IMAGE: ${{ steps.vars.outputs.IMAGE }}

    steps:
      - id: vars
        run: |
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_OUTPUT
          echo "QA_SQS_QUEUE_URL=${{ vars.QA_SQS_QUEUE_URL }}" >> $GITHUB_OUTPUT
          echo "REMARKETING_SERVICE_QUEUE_URL=${{ vars.REMARKETING_SERVICE_QUEUE_URL }}" >> $GITHUB_OUTPUT
          echo "QA_PROCESS_TABLE=${{ vars.QA_PROCESS_TABLE }}" >> $GITHUB_OUTPUT
          echo "USER_TABLE=${{ vars.USER_TABLE }}" >> $GITHUB_OUTPUT
          echo "MAX_NUM_PROCESSES=${{ vars.MAX_NUM_PROCESSES }}" >> $GITHUB_OUTPUT
          echo "IMAGE=${{ vars.ECR_REPO }}:${{ needs.analyze-commits.outputs.new_tag }}" >> $GITHUB_OUTPUT
      
  deploy_to_ecs:
    needs: [export_vars, pull-retag-and-push]
    uses: ./.github/workflows/deploy-ecs.yml
    with:
      image: ${{ needs.export_vars.outputs.IMAGE }}
      environment: production
      environment_variables: |
        AWS_REGION=${{ needs.export_vars.outputs.AWS_REGION }}
        QA_SQS_QUEUE_URL=${{ needs.export_vars.outputs.QA_SQS_QUEUE_URL }}
        REMARKETING_SERVICE_QUEUE_URL=${{ needs.export_vars.outputs.REMARKETING_SERVICE_QUEUE_URL }}
        ASPNETCORE_ENVIRONMENT=Production
        QA_PROCESS_TABLE=${{ needs.export_vars.outputs.QA_PROCESS_TABLE }}
        USER_TABLE=${{ needs.export_vars.outputs.USER_TABLE }}
        MAX_NUM_PROCESSES=${{ needs.export_vars.outputs.MAX_NUM_PROCESSES }}
    secrets: inherit

  delete_ecr_tag:
    needs: deploy_to_ecs
    uses: ./.github/workflows/delete-ecr-tag.yml
    with:
      environment: production
      tag: release
    secrets: inherit